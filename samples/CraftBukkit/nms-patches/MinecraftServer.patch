--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -9,6 +9,8 @@
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.Lifecycle;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -54,6 +56,15 @@
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+// CraftBukkit start
+import com.google.common.collect.ImmutableSet;
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.event.server.ServerLoadEvent;
+// CraftBukkit end
 
 public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTask> implements IMojangStatistics, ICommandListener, AutoCloseable {
 
@@ -124,6 +135,20 @@
     private final DefinedStructureManager ak;
     protected SaveData saveData;
 
+    // CraftBukkit start
+    public DataPackConfiguration datapackconfiguration;
+    public org.bukkit.craftbukkit.CraftServer server;
+    public OptionSet options;
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+    public ConsoleReader reader;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    public CommandDispatcher vanillaCommandDispatcher;
+    private boolean forceTicks;
+    // CraftBukkit end
+
     public static <S extends MinecraftServer> S a(Function<Thread, S> function) {
         AtomicReference<S> atomicreference = new AtomicReference();
         Thread thread = new Thread(() -> {
@@ -133,21 +158,21 @@
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
             MinecraftServer.LOGGER.error(throwable);
         });
-        S s0 = (MinecraftServer) function.apply(thread);
+        S s0 = function.apply(thread); // CraftBukkit - decompile error
 
         atomicreference.set(s0);
         thread.start();
         return s0;
     }
 
-    public MinecraftServer(Thread thread, IRegistryCustom.Dimension iregistrycustom_dimension, Convertable.ConversionSession convertable_conversionsession, SaveData savedata, ResourcePackRepository resourcepackrepository, Proxy proxy, DataFixer datafixer, DataPackResources datapackresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldLoadListenerFactory worldloadlistenerfactory) {
+    public MinecraftServer(OptionSet options, DataPackConfiguration datapackconfiguration, Thread thread, IRegistryCustom.Dimension iregistrycustom_dimension, Convertable.ConversionSession convertable_conversionsession, SaveData savedata, ResourcePackRepository resourcepackrepository, Proxy proxy, DataFixer datafixer, DataPackResources datapackresources, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldLoadListenerFactory worldloadlistenerfactory) {
         super("Server");
         this.m = new GameProfilerSwitcher(SystemUtils.a, this::ai);
         this.methodProfiler = GameProfilerDisabled.a;
         this.serverPing = new ServerPing();
         this.r = new Random();
         this.serverPort = -1;
-        this.worldServer = Maps.newLinkedHashMap();
+        this.worldServer = Maps.newLinkedHashMap(); // CraftBukkit - keep order, k+v already use identity methods
         this.isRunning = true;
         this.h = new long[100];
         this.K = "";
@@ -173,7 +198,34 @@
         this.ak = new DefinedStructureManager(datapackresources.h(), convertable_conversionsession, datafixer);
         this.serverThread = thread;
         this.executorService = SystemUtils.f();
+        // CraftBukkit start
+        this.options = options;
+        this.datapackconfiguration = datapackconfiguration;
+        this.vanillaCommandDispatcher = datapackresources.commandDispatcher; // CraftBukkit
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            Main.useJline = false;
+        }
+
+        try {
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+        } catch (Throwable e) {
+            try {
+                // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                Main.useJline = false;
+                reader = new ConsoleReader(System.in, System.out);
+                reader.setExpandEvents(false);
+            } catch (IOException ex) {
+                LOGGER.warn((String) null, ex);
+            }
+        }
+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
     }
+    // CraftBukkit end
 
     private void initializeScoreboards(WorldPersistentData worldpersistentdata) {
         PersistentScoreboard persistentscoreboard = (PersistentScoreboard) worldpersistentdata.a(PersistentScoreboard::new, "scoreboard");
@@ -186,7 +238,7 @@
 
     public static void convertWorld(Convertable.ConversionSession convertable_conversionsession) {
         if (convertable_conversionsession.isConvertable()) {
-            MinecraftServer.LOGGER.info("Converting map!");
+            MinecraftServer.LOGGER.info("Converting map! {}", convertable_conversionsession.getLevelName()); // CraftBukkit
             convertable_conversionsession.convert(new IProgressUpdate() {
                 private long a = SystemUtils.getMonotonicMillis();
 
@@ -209,45 +261,184 @@
 
     }
 
-    protected void loadWorld() {
-        this.loadResourcesZip();
-        this.saveData.a(this.getServerModName(), this.getModded().isPresent());
-        WorldLoadListener worldloadlistener = this.worldLoadListenerFactory.create(11);
+    protected void loadWorld(String s) {
+        int worldCount = 3;
+
+        for (int worldId = 0; worldId < worldCount; ++worldId) {
+            WorldServer world;
+            WorldDataServer worlddata;
+            byte dimension = 0;
+            ResourceKey<WorldDimension> dimensionKey = WorldDimension.OVERWORLD;
+
+            if (worldId == 1) {
+                if (getAllowNether()) {
+                    dimension = -1;
+                    dimensionKey = WorldDimension.THE_NETHER;
+                } else {
+                    continue;
+                }
+            }
+
+            if (worldId == 2) {
+                if (server.getAllowEnd()) {
+                    dimension = 1;
+                    dimensionKey = WorldDimension.THE_END;
+                } else {
+                    continue;
+                }
+            }
+
+            String worldType = org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
+            String name = (dimension == 0) ? s : s + "_" + worldType;
+            Convertable.ConversionSession worldSession;
+            if (dimension == 0) {
+                worldSession = this.convertable;
+            } else {
+                String dim = "DIM" + dimension;
+
+                File newWorld = new File(new File(name), dim);
+                File oldWorld = new File(new File(s), dim);
+                File oldLevelDat = new File(new File(s), "level.dat"); // The data folders exist on first run as they are created in the PersistentCollection constructor above, but the level.dat won't
+
+                if (!newWorld.isDirectory() && oldWorld.isDirectory() && oldLevelDat.isFile()) {
+                    MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder required ----");
+                    MinecraftServer.LOGGER.info("Unfortunately due to the way that Minecraft implemented multiworld support in 1.6, Bukkit requires that you move your " + worldType + " folder to a new location in order to operate correctly.");
+                    MinecraftServer.LOGGER.info("We will move this folder for you, but it will mean that you need to move it back should you wish to stop using Bukkit in the future.");
+                    MinecraftServer.LOGGER.info("Attempting to move " + oldWorld + " to " + newWorld + "...");
+
+                    if (newWorld.exists()) {
+                        MinecraftServer.LOGGER.warn("A file or folder already exists at " + newWorld + "!");
+                        MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder failed ----");
+                    } else if (newWorld.getParentFile().mkdirs()) {
+                        if (oldWorld.renameTo(newWorld)) {
+                            MinecraftServer.LOGGER.info("Success! To restore " + worldType + " in the future, simply move " + newWorld + " to " + oldWorld);
+                            // Migrate world data too.
+                            try {
+                                com.google.common.io.Files.copy(oldLevelDat, new File(new File(name), "level.dat"));
+                                org.apache.commons.io.FileUtils.copyDirectory(new File(new File(s), "data"), new File(new File(name), "data"));
+                            } catch (IOException exception) {
+                                MinecraftServer.LOGGER.warn("Unable to migrate world data.");
+                            }
+                            MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder complete ----");
+                        } else {
+                            MinecraftServer.LOGGER.warn("Could not move folder " + oldWorld + " to " + newWorld + "!");
+                            MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder failed ----");
+                        }
+                    } else {
+                        MinecraftServer.LOGGER.warn("Could not create path for " + newWorld + "!");
+                        MinecraftServer.LOGGER.info("---- Migration of old " + worldType + " folder failed ----");
+                    }
+                }
+
+                try {
+                    worldSession = Convertable.a(server.getWorldContainer().toPath()).c(name, dimensionKey);
+                } catch (IOException ex) {
+                    throw new RuntimeException(ex);
+                }
+                MinecraftServer.convertWorld(worldSession); // Run conversion now
+            }
+
+            org.bukkit.generator.ChunkGenerator gen = this.server.getGenerator(name);
+
+            IRegistryCustom.Dimension iregistrycustom_dimension = this.customRegistry;
+
+            RegistryReadOps<NBTBase> registryreadops = RegistryReadOps.a((DynamicOps) DynamicOpsNBT.a, this.dataPackResources.h(), iregistrycustom_dimension);
+            worlddata = (WorldDataServer) worldSession.a((DynamicOps) registryreadops, datapackconfiguration);
+            if (worlddata == null) {
+                WorldSettings worldsettings;
+                GeneratorSettings generatorsettings;
+
+                if (this.isDemoMode()) {
+                    worldsettings = MinecraftServer.c;
+                    generatorsettings = GeneratorSettings.a((IRegistryCustom) iregistrycustom_dimension);
+                } else {
+                    DedicatedServerProperties dedicatedserverproperties = ((DedicatedServer) this).getDedicatedServerProperties();
+
+                    worldsettings = new WorldSettings(dedicatedserverproperties.levelName, dedicatedserverproperties.gamemode, dedicatedserverproperties.hardcore, dedicatedserverproperties.difficulty, false, new GameRules(), datapackconfiguration);
+                    generatorsettings = options.has("bonusChest") ? dedicatedserverproperties.generatorSettings.j() : dedicatedserverproperties.generatorSettings;
+                }
+
+                worlddata = new WorldDataServer(worldsettings, generatorsettings, Lifecycle.stable());
+            }
+            worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
+            if (options.has("forceUpgrade")) {
+                net.minecraft.server.Main.convertWorld(worldSession, DataConverterRegistry.a(), options.has("eraseCache"), () -> {
+                    return true;
+                }, worlddata.getGeneratorSettings().d().d().stream().map((entry) -> {
+                    return ResourceKey.a(IRegistry.K, ((ResourceKey) entry.getKey()).a());
+                }).collect(ImmutableSet.toImmutableSet()));
+            }
+
+            IWorldDataServer iworlddataserver = worlddata;
+            GeneratorSettings generatorsettings = worlddata.getGeneratorSettings();
+            boolean flag = generatorsettings.isDebugWorld();
+            long i = generatorsettings.getSeed();
+            long j = BiomeManager.a(i);
+            List<MobSpawner> list = ImmutableList.of(new MobSpawnerPhantom(), new MobSpawnerPatrol(), new MobSpawnerCat(), new VillageSiege(), new MobSpawnerTrader(iworlddataserver));
+            RegistryMaterials<WorldDimension> registrymaterials = generatorsettings.d();
+            WorldDimension worlddimension = (WorldDimension) registrymaterials.a(dimensionKey);
+            DimensionManager dimensionmanager;
+            ChunkGenerator chunkgenerator;
+
+            if (worlddimension == null) {
+                dimensionmanager = (DimensionManager) this.customRegistry.a().d(DimensionManager.OVERWORLD);
+                chunkgenerator = GeneratorSettings.a(customRegistry.b(IRegistry.ay), customRegistry.b(IRegistry.ar), (new Random()).nextLong());
+            } else {
+                dimensionmanager = worlddimension.b();
+                chunkgenerator = worlddimension.c();
+            }
+
+            ResourceKey<World> worldKey = ResourceKey.a(IRegistry.L, dimensionKey.a());
 
-        this.a(worldloadlistener);
+            if (worldId == 0) {
+                this.saveData = worlddata;
+                this.saveData.setGameType(((DedicatedServer) this).getDedicatedServerProperties().gamemode); // From DedicatedServer.init
+
+                WorldLoadListener worldloadlistener = this.worldLoadListenerFactory.create(11);
+
+                world = new WorldServer(this, this.executorService, worldSession, iworlddataserver, worldKey, dimensionmanager, worldloadlistener, chunkgenerator, flag, j, list, true, org.bukkit.World.Environment.getEnvironment(dimension), gen);
+                WorldPersistentData worldpersistentdata = world.getWorldPersistentData();
+                this.initializeScoreboards(worldpersistentdata);
+                this.server.scoreboardManager = new org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager(this, world.getScoreboard());
+                this.persistentCommandStorage = new PersistentCommandStorage(worldpersistentdata);
+            } else {
+                WorldLoadListener worldloadlistener = this.worldLoadListenerFactory.create(11);
+                world = new WorldServer(this, this.executorService, worldSession, iworlddataserver, worldKey, dimensionmanager, worldloadlistener, chunkgenerator, flag, j, ImmutableList.of(), true, org.bukkit.World.Environment.getEnvironment(dimension), gen);
+            }
+
+            worlddata.a(this.getServerModName(), this.getModded().isPresent());
+            this.initWorld(world, worlddata, saveData, worlddata.getGeneratorSettings());
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
+
+            this.worldServer.put(world.getDimensionKey(), world);
+            this.getPlayerList().setPlayerFileData(world);
+
+            if (worlddata.getCustomBossEvents() != null) {
+                this.getBossBattleCustomData().load(worlddata.getCustomBossEvents());
+            }
+        }
         this.updateWorldSettings();
-        this.loadSpawn(worldloadlistener);
+        for (WorldServer worldserver : this.getWorlds()) {
+            this.loadSpawn(worldserver.getChunkProvider().playerChunkMap.worldLoadListener, worldserver);
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(worldserver.getWorld()));
+        }
+
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
+        this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+        this.serverConnection.acceptConnections();
+        // CraftBukkit end
+
     }
 
     protected void updateWorldSettings() {}
 
-    protected void a(WorldLoadListener worldloadlistener) {
-        IWorldDataServer iworlddataserver = this.saveData.H();
-        GeneratorSettings generatorsettings = this.saveData.getGeneratorSettings();
+    // CraftBukkit start
+    public void initWorld(WorldServer worldserver, IWorldDataServer iworlddataserver, SaveData saveData, GeneratorSettings generatorsettings) {
         boolean flag = generatorsettings.isDebugWorld();
-        long i = generatorsettings.getSeed();
-        long j = BiomeManager.a(i);
-        List<MobSpawner> list = ImmutableList.of(new MobSpawnerPhantom(), new MobSpawnerPatrol(), new MobSpawnerCat(), new VillageSiege(), new MobSpawnerTrader(iworlddataserver));
-        RegistryMaterials<WorldDimension> registrymaterials = generatorsettings.d();
-        WorldDimension worlddimension = (WorldDimension) registrymaterials.a(WorldDimension.OVERWORLD);
-        DimensionManager dimensionmanager;
-        Object object;
-
-        if (worlddimension == null) {
-            dimensionmanager = (DimensionManager) this.customRegistry.a().d(DimensionManager.OVERWORLD);
-            object = GeneratorSettings.a(this.customRegistry.b(IRegistry.ay), this.customRegistry.b(IRegistry.ar), (new Random()).nextLong());
-        } else {
-            dimensionmanager = worlddimension.b();
-            object = worlddimension.c();
+        // CraftBukkit start
+        if (worldserver.generator != null) {
+            worldserver.getWorld().getPopulators().addAll(worldserver.generator.getDefaultPopulators(worldserver.getWorld()));
         }
-
-        WorldServer worldserver = new WorldServer(this, this.executorService, this.convertable, iworlddataserver, World.OVERWORLD, dimensionmanager, worldloadlistener, (ChunkGenerator) object, flag, j, list, true);
-
-        this.worldServer.put(World.OVERWORLD, worldserver);
-        WorldPersistentData worldpersistentdata = worldserver.getWorldPersistentData();
-
-        this.initializeScoreboards(worldpersistentdata);
-        this.persistentCommandStorage = new PersistentCommandStorage(worldpersistentdata);
         WorldBorder worldborder = worldserver.getWorldBorder();
 
         worldborder.a(iworlddataserver.r());
@@ -272,31 +463,8 @@
 
             iworlddataserver.c(true);
         }
-
-        this.getPlayerList().setPlayerFileData(worldserver);
-        if (this.saveData.getCustomBossEvents() != null) {
-            this.getBossBattleCustomData().load(this.saveData.getCustomBossEvents());
-        }
-
-        Iterator iterator = registrymaterials.d().iterator();
-
-        while (iterator.hasNext()) {
-            Entry<ResourceKey<WorldDimension>, WorldDimension> entry = (Entry) iterator.next();
-            ResourceKey<WorldDimension> resourcekey = (ResourceKey) entry.getKey();
-
-            if (resourcekey != WorldDimension.OVERWORLD) {
-                ResourceKey<World> resourcekey1 = ResourceKey.a(IRegistry.L, resourcekey.a());
-                DimensionManager dimensionmanager1 = ((WorldDimension) entry.getValue()).b();
-                ChunkGenerator chunkgenerator = ((WorldDimension) entry.getValue()).c();
-                SecondaryWorldData secondaryworlddata = new SecondaryWorldData(this.saveData, iworlddataserver);
-                WorldServer worldserver1 = new WorldServer(this, this.executorService, this.convertable, secondaryworlddata, resourcekey1, dimensionmanager1, worldloadlistener, chunkgenerator, flag, j, ImmutableList.of(), false);
-
-                worldborder.a((IWorldBorderListener) (new IWorldBorderListener.a(worldserver1.getWorldBorder())));
-                this.worldServer.put(resourcekey1, worldserver1);
-            }
-        }
-
     }
+    // CraftBukkit end
 
     private static void a(WorldServer worldserver, IWorldDataServer iworlddataserver, boolean flag, boolean flag1, boolean flag2) {
         ChunkGenerator chunkgenerator = worldserver.getChunkProvider().getChunkGenerator();
@@ -312,6 +480,21 @@
                 return biomebase.b().b();
             }, random);
             ChunkCoordIntPair chunkcoordintpair = blockposition == null ? new ChunkCoordIntPair(0, 0) : new ChunkCoordIntPair(blockposition);
+            // CraftBukkit start
+            if (worldserver.generator != null) {
+                Random rand = new Random(worldserver.getSeed());
+                org.bukkit.Location spawn = worldserver.generator.getFixedSpawnLocation(worldserver.getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != worldserver.getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + iworlddataserver.getName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        iworlddataserver.setSpawn(new BlockPosition(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()), spawn.getYaw());
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
 
             if (blockposition == null) {
                 MinecraftServer.LOGGER.warn("Unable to find spawn biome");
@@ -378,8 +561,15 @@
         iworlddataserver.setGameType(EnumGamemode.SPECTATOR);
     }
 
-    public void loadSpawn(WorldLoadListener worldloadlistener) {
-        WorldServer worldserver = this.E();
+    // CraftBukkit start
+    public void loadSpawn(WorldLoadListener worldloadlistener, WorldServer worldserver) {
+        if (!worldserver.getWorld().getKeepSpawnInMemory()) {
+            return;
+        }
+
+        // WorldServer worldserver = this.E();
+        this.forceTicks = true;
+        // CraftBukkit end
 
         MinecraftServer.LOGGER.info("Preparing start region for dimension {}", worldserver.getDimensionKey().a());
         BlockPosition blockposition = worldserver.getSpawn();
@@ -392,17 +582,21 @@
         chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(blockposition), 11, Unit.INSTANCE);
 
         while (chunkproviderserver.b() != 441) {
-            this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
-            this.sleepForTick();
+            // CraftBukkit start
+            // this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
+            this.executeModerately();
+            // CraftBukkit end
         }
 
-        this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
-        this.sleepForTick();
-        Iterator iterator = this.worldServer.values().iterator();
-
-        while (iterator.hasNext()) {
-            WorldServer worldserver1 = (WorldServer) iterator.next();
-            ForcedChunk forcedchunk = (ForcedChunk) worldserver1.getWorldPersistentData().b(ForcedChunk::new, "chunks");
+        // CraftBukkit start
+        // this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
+        this.executeModerately();
+        // Iterator iterator = this.worldServer.values().iterator();
+
+        if (true) {
+            WorldServer worldserver1 = worldserver;
+            ForcedChunk forcedchunk = (ForcedChunk) worldserver.getWorldPersistentData().b(ForcedChunk::new, "chunks");
+            // CraftBukkit end
 
             if (forcedchunk != null) {
                 LongIterator longiterator = forcedchunk.a().iterator();
@@ -416,11 +610,18 @@
             }
         }
 
-        this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
-        this.sleepForTick();
+        // CraftBukkit start
+        // this.nextTick = SystemUtils.getMonotonicMillis() + 10L;
+        this.executeModerately();
+        // CraftBukkit end
         worldloadlistener.b();
         chunkproviderserver.getLightEngine().a(5);
-        this.updateSpawnFlags();
+        // CraftBukkit start
+        // this.updateSpawnFlags();
+        worldserver.setSpawnFlags(this.getSpawnMonsters(), this.getSpawnAnimals());
+
+        this.forceTicks = false;
+        // CraftBukkit end
     }
 
     protected void loadResourcesZip() {
@@ -465,12 +666,16 @@
             worldserver.save((IProgressUpdate) null, flag1, worldserver.savingDisabled && !flag2);
         }
 
+        // CraftBukkit start - moved to WorldServer.save
+        /*
         WorldServer worldserver1 = this.E();
         IWorldDataServer iworlddataserver = this.saveData.H();
 
         iworlddataserver.a(worldserver1.getWorldBorder().t());
         this.saveData.setCustomBossEvents(this.getBossBattleCustomData().save());
         this.convertable.a(this.customRegistry, this.saveData, this.getPlayerList().save());
+        */
+        // CraftBukkit end
         return flag3;
     }
 
@@ -479,8 +684,29 @@
         this.stop();
     }
 
+    // CraftBukkit start
+    private boolean hasStopped = false;
+    private final Object stopLock = new Object();
+    public final boolean hasStopped() {
+        synchronized (stopLock) {
+            return hasStopped;
+        }
+    }
+    // CraftBukkit end
+
     protected void stop() {
+        // CraftBukkit start - prevent double stopping on multiple threads
+        synchronized(stopLock) {
+            if (hasStopped) return;
+            hasStopped = true;
+        }
+        // CraftBukkit end
         MinecraftServer.LOGGER.info("Stopping server");
+        // CraftBukkit start
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
+        // CraftBukkit end
         if (this.getServerConnection() != null) {
             this.getServerConnection().b();
         }
@@ -489,6 +715,7 @@
             MinecraftServer.LOGGER.info("Saving players");
             this.playerList.savePlayers();
             this.playerList.shutdown();
+            try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
         MinecraftServer.LOGGER.info("Saving worlds");
@@ -566,14 +793,16 @@
                 while (this.isRunning) {
                     long i = SystemUtils.getMonotonicMillis() - this.nextTick;
 
-                    if (i > 2000L && this.nextTick - this.lastOverloadTime >= 15000L) {
+                    if (i > 5000L && this.nextTick - this.lastOverloadTime >= 30000L) { // CraftBukkit
                         long j = i / 50L;
 
+                        if (server.getWarnOnOverload()) // CraftBukkit
                         MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                         this.nextTick += j * 50L;
                         this.lastOverloadTime = this.nextTick;
                     }
 
+                    MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
                     this.nextTick += 50L;
                     GameProfilerTick gameprofilertick = GameProfilerTick.a("Server");
 
@@ -619,6 +848,12 @@
             } catch (Throwable throwable1) {
                 MinecraftServer.LOGGER.error("Exception stopping the server", throwable1);
             } finally {
+                // CraftBukkit start - Restore terminal to original settings
+                try {
+                    reader.getTerminal().restore();
+                } catch (Exception ignored) {
+                }
+                // CraftBukkit end
                 this.exit();
             }
 
@@ -627,8 +862,15 @@
     }
 
     private boolean canSleepForTick() {
-        return this.isEntered() || SystemUtils.getMonotonicMillis() < (this.X ? this.W : this.nextTick);
+        // CraftBukkit start
+        return this.forceTicks || this.isEntered() || SystemUtils.getMonotonicMillis() < (this.X ? this.W : this.nextTick);
+    }
+
+    private void executeModerately() {
+        this.executeAll();
+        java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
     }
+    // CraftBukkit end
 
     protected void sleepForTick() {
         this.executeAll();
@@ -734,7 +976,7 @@
             this.serverPing.b().a(agameprofile);
         }
 
-        if (this.ticks % 6000 == 0) {
+        if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
             MinecraftServer.LOGGER.debug("Autosave started");
             this.methodProfiler.enter("save");
             this.playerList.savePlayers();
@@ -764,22 +1006,39 @@
     }
 
     protected void b(BooleanSupplier booleansupplier) {
+        this.server.getScheduler().mainThreadHeartbeat(this.ticks); // CraftBukkit
         this.methodProfiler.enter("commandFunctions");
         this.getFunctionData().tick();
         this.methodProfiler.exitEnter("levels");
         Iterator iterator = this.getWorlds().iterator();
 
+        // CraftBukkit start
+        // Run tasks that are waiting on processing
+        while (!processQueue.isEmpty()) {
+            processQueue.remove().run();
+        }
+
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.ticks % 20 == 0) {
+            for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
+                EntityPlayer entityplayer = (EntityPlayer) this.getPlayerList().players.get(i);
+                entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(entityplayer.world.getTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE))); // Add support for per player time
+            }
+        }
+
         while (iterator.hasNext()) {
             WorldServer worldserver = (WorldServer) iterator.next();
 
             this.methodProfiler.a(() -> {
                 return worldserver + " " + worldserver.getDimensionKey().a();
             });
+            /* Drop global time updates
             if (this.ticks % 20 == 0) {
                 this.methodProfiler.enter("timeSync");
                 this.playerList.a((Packet) (new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE))), worldserver.getDimensionKey());
                 this.methodProfiler.exit();
             }
+            // CraftBukkit end */
 
             this.methodProfiler.enter("tick");
 
@@ -863,7 +1122,7 @@
     }
 
     public String getServerModName() {
-        return "vanilla";
+        return server.getName(); // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
@@ -1220,16 +1479,17 @@
 
     public CompletableFuture<Void> a(Collection<String> collection) {
         CompletableFuture<Void> completablefuture = CompletableFuture.supplyAsync(() -> {
-            Stream stream = collection.stream();
+            Stream<String> stream = collection.stream(); // CraftBukkit - decompile error
             ResourcePackRepository resourcepackrepository = this.resourcePackRepository;
 
             this.resourcePackRepository.getClass();
-            return (ImmutableList) stream.map(resourcepackrepository::a).filter(Objects::nonNull).map(ResourcePackLoader::d).collect(ImmutableList.toImmutableList());
+            return stream.map(resourcepackrepository::a).filter(Objects::nonNull).map(ResourcePackLoader::d).collect(ImmutableList.toImmutableList()); // CraftBukkit - decompile error
         }, this).thenCompose((immutablelist) -> {
             return DataPackResources.a(immutablelist, this.j() ? CommandDispatcher.ServerType.DEDICATED : CommandDispatcher.ServerType.INTEGRATED, this.h(), this.executorService, this);
         }).thenAcceptAsync((datapackresources) -> {
             this.dataPackResources.close();
             this.dataPackResources = datapackresources;
+            this.server.syncCommands(); // SPIGOT-5884: Lost on reload
             this.resourcePackRepository.a(collection);
             this.saveData.a(a(this.resourcePackRepository));
             datapackresources.i();
@@ -1595,6 +1855,22 @@
 
     }
 
+    // CraftBukkit start
+    @Override
+    public boolean isMainThread() {
+        return super.isMainThread() || this.isStopped(); // CraftBukkit - MC-142590
+    }
+
+    public boolean isDebugging() {
+        return false;
+    }
+
+    @Deprecated
+    public static MinecraftServer getServer() {
+        return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+    }
+    // CraftBukkit end
+
     private void a(@Nullable GameProfilerTick gameprofilertick) {
         if (this.O) {
             this.O = false;
