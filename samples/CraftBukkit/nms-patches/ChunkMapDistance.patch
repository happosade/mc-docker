--- a/net/minecraft/server/ChunkMapDistance.java
+++ b/net/minecraft/server/ChunkMapDistance.java
@@ -59,7 +59,7 @@
         while (objectiterator.hasNext()) {
             Entry<ArraySetSorted<Ticket<?>>> entry = (Entry) objectiterator.next();
 
-            if (((ArraySetSorted) entry.getValue()).removeIf((ticket) -> {
+            if ((entry.getValue()).removeIf((ticket) -> { // CraftBukkit - decompile error
                 return ticket.b(this.currentTick);
             })) {
                 this.ticketLevelTracker.update(entry.getLongKey(), getLowestTicketLevel((ArraySetSorted) entry.getValue()), false);
@@ -95,10 +95,25 @@
         }
 
         if (!this.pendingChunkUpdates.isEmpty()) {
-            this.pendingChunkUpdates.forEach((playerchunk) -> {
+            // CraftBukkit start
+            // Iterate pending chunk updates with protection against concurrent modification exceptions
+            java.util.Iterator<PlayerChunk> iter = this.pendingChunkUpdates.iterator();
+            int expectedSize = this.pendingChunkUpdates.size();
+            do {
+                PlayerChunk playerchunk = iter.next();
+                iter.remove();
+                expectedSize--;
+
                 playerchunk.a(playerchunkmap);
-            });
-            this.pendingChunkUpdates.clear();
+
+                // Reset iterator if set was modified using add()
+                if (this.pendingChunkUpdates.size() != expectedSize) {
+                    expectedSize = this.pendingChunkUpdates.size();
+                    iter = this.pendingChunkUpdates.iterator();
+                }
+            } while (iter.hasNext());
+            // CraftBukkit end
+
             return true;
         } else {
             if (!this.l.isEmpty()) {
@@ -134,23 +149,25 @@
         }
     }
 
-    private void addTicket(long i, Ticket<?> ticket) {
+    private boolean addTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
         ArraySetSorted<Ticket<?>> arraysetsorted = this.e(i);
         int j = getLowestTicketLevel(arraysetsorted);
-        Ticket<?> ticket1 = (Ticket) arraysetsorted.a((Object) ticket);
+        Ticket<?> ticket1 = (Ticket) arraysetsorted.a(ticket); // CraftBukkit - decompile error
 
         ticket1.a(this.currentTick);
         if (ticket.b() < j) {
             this.ticketLevelTracker.update(i, ticket.b(), true);
         }
 
+        return ticket == ticket1; // CraftBukkit
     }
 
-    private void removeTicket(long i, Ticket<?> ticket) {
+    private boolean removeTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
         ArraySetSorted<Ticket<?>> arraysetsorted = this.e(i);
 
+        boolean removed = false; // CraftBukkit
         if (arraysetsorted.remove(ticket)) {
-            ;
+            removed = true; // CraftBukkit
         }
 
         if (arraysetsorted.isEmpty()) {
@@ -158,16 +175,29 @@
         }
 
         this.ticketLevelTracker.update(i, getLowestTicketLevel(arraysetsorted), false);
+        return removed; // CraftBukkit
     }
 
     public <T> void a(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
-        this.addTicket(chunkcoordintpair.pair(), new Ticket<>(tickettype, i, t0));
+        // CraftBukkit start
+        this.addTicketAtLevel(tickettype, chunkcoordintpair, i, t0);
+    }
+
+    public <T> boolean addTicketAtLevel(TicketType<T> ticketType, ChunkCoordIntPair chunkcoordintpair, int level, T identifier) {
+        return this.addTicket(chunkcoordintpair.pair(), new Ticket<>(ticketType, level, identifier));
+        // CraftBukkit end
     }
 
     public <T> void b(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
-        Ticket<T> ticket = new Ticket<>(tickettype, i, t0);
+        // CraftBukkit start
+        this.removeTicketAtLevel(tickettype, chunkcoordintpair, i, t0);
+    }
 
-        this.removeTicket(chunkcoordintpair.pair(), ticket);
+    public <T> boolean removeTicketAtLevel(TicketType<T> ticketType, ChunkCoordIntPair chunkcoordintpair, int level, T identifier) {
+        Ticket<T> ticket = new Ticket<>(ticketType, level, identifier);
+
+        return this.removeTicket(chunkcoordintpair.pair(), ticket);
+        // CraftBukkit end
     }
 
     public <T> void addTicket(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
@@ -251,6 +281,26 @@
         return this.i.a();
     }
 
+    // CraftBukkit start
+    public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+        Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+
+        for (java.util.Iterator<Entry<ArraySetSorted<Ticket<?>>>> iterator = this.tickets.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+            Entry<ArraySetSorted<Ticket<?>>> entry = iterator.next();
+            ArraySetSorted<Ticket<?>> tickets = entry.getValue();
+            if (tickets.remove(target)) {
+                // copied from removeTicket
+                this.ticketLevelTracker.update(entry.getLongKey(), getLowestTicketLevel(tickets), false);
+
+                // can't use entry after it's removed
+                if (tickets.isEmpty()) {
+                    iterator.remove();
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+
     class a extends ChunkMap {
 
         public a() {
